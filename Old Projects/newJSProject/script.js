let a = 5;
let b = 11;
let c = 15;

a=b=c;
//console.log(a, b, c);

let foo = "foo";
let bar = 5;
let baz = true;

bar /= 2;     // 2.5
bar /= 0;     // Infinity

let bz = 9;
bz %= 4;
//console.log(bz);





let bb = 5; //  (00000000000000000000000000000101)
bb <<= 2;   // 20 (00000000000000000000000000010100)
//console.log(bb);



for (let i = 0; i<=100; i++){
    let zx = 14;
    let equal = zx | 9;
    console.log(equal);
}


//-2147483648 и 2147483647 - это самое минимальное и самое максимальное числа, которые можно представить в 32 разрядной ячейке памяти.i


// & - и
// 0 0 = 0
// 0 1 = 0
// 1 0 = 0
// 1 1 = 1


// | - или
// 0 0 = 0
// 1 0 = 1
// 0 1 = 1
// 1 1 = 1


// ^ - истинность
// 0 0 = 0
// 0 1 = 1
// 1 0 = 1
// 1 1 = 0


// ~ - инверсия .вернет число обрратно с минусом + 1
// ~ 9 = -10
// 0 = 1
// 1 = 0

let ss = 9;
console.log(~ ss);


console.log(9 << 2);
// они равны
console.log(9 * 2 ** 2);

// 9 (осн. 10): 00000000000000000000000000001001 (осн. 2)
//                   --------------------------------
// 9 << 2 (осн. 10): 00000000000000000000000000100100 (осн. 2) = 36 (осн. 10)


console.log(9 >> 2);
// 9 (осн. 10): 00000000000000000000000000001001 (осн. 2)
//                   --------------------------------
// 9 >> 2 (осн. 10): 00000000000000000000000000000010 (осн. 2) = 2 (осн. 10)


// -9 (осн. 10): 11111111111111111111111111110111 (осн. 2)
//                    --------------------------------
// -9 >> 2 (осн. 10): 11111111111111111111111111111101 (осн. 2) = -3 (осн. 10)


console.log(9 >>> 2);
//Например, 9 >>> 2 дает в результате 2, как и 9 >> 2:

// 9 (осн. 10): 00000000000000000000000000001001 (осн. 2)
//                    --------------------------------
// 9 >>> 2 (осн. 10): 00000000000000000000000000000010 (осн. 2) = 2 (осн. 10)

// -9 (осн. 10): 11111111111111111111111111110111 (осн. 2)
//                     --------------------------------
// -9 >>> 2 (осн. 10): 00111111111111111111111111111101 (осн. 2) = 1073741821 (осн. 10)


// флаг

let flags = 0x5; // двоичное 0101

let FLAG_A = 0x1; // 0001
let FLAG_B = 0x2; // 0010
let FLAG_C = 0x4; // 0100
let FLAG_D = 0x8; // 1000

let mask = FLAG_A | FLAG_B | FLAG_D; // 0001 | 0010 | 1000 => 1011


// if we own a cat
if (flags & FLAG_C) { // 0101 & 0100 => 0100 => true
    // do stuff
    console.log("it works");

}


if ((flags & FLAG_B) || (flags & FLAG_C)) { // (0101 & 0010) || (0101 & 0100) => 0000 || 0100 => true
    // do stuff
}


// if we own a bat or cat
let maskTwo = FLAG_B | FLAG_C; // 0010 | 0100 => 0110
if (flags & maskTwo) { // 0101 & 0110 => 0100 => true
    // do stuff
}



let maskThee = FLAG_C | FLAG_D; // 0100 | 1000 => 1100
flags |= maskThee;   // 0101 | 1100 => 1101

// no, we don't neither have an ant problem nor own a cat
let maskFour = ~(FLAG_A | FLAG_C); // ~0101 => 1010
flags &= maskFour;   // 1101 & 1010 => 1000

// no, we don't have an ant problem, and we don't own a cat
let maskFive = ~FLAG_A & ~FLAG_C;
flags &= maskFive;   // 1101 & 1010 => 1000


// if we didn't have a bat, we have one now, and if we did have one, bye-bye bat
// same thing for cats
let maskSix = FLAG_B | FLAG_C;
flags = flags ^ maskSix;   // 1100 ^ 0110 => 1010


// entering parallel universe...
flags = ~flags;    // ~1010 => 0101





// из 2 в 10
// 101 = 5
// 1*(2^2)+0*(2^1)+1*(2^0) = 5
// 4 + 0 + 1 = 5


// из 8 в 10
// 555 = 365
// 5*(8^2)+5*(8^1)+5*(8^0) = 365
// 320 + 40 + 5 =365


// из 16 в 10
// A  B  C  D  E  F
// 10 11 12 13 14 15

// 340 = 832
// 3*(16^2)+4*(16^1)+0*(16^0) = 832
// 768 + 64 + 0 = 832


;(function (){
    let users = ['Alice', 'Dan', 'Jessica'];
    let query = 'A';
    let user = users.filter(user => user.startsWith(query));
}());
























